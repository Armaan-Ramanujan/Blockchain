contract DonationTracker {
    struct Donor {
        address donorAddress;
        uint totalDonated;
    }

    mapping(address => uint) public donations;
    Donor[3] public topDonors;

    event DonationReceived(address indexed donor, uint amount);
    event TopDonorsUpdated(address[3] donors, uint[3] amounts);

    function donate() external payable {
        require(msg.value > 0, "Donation must be greater than zero");

        donations[msg.sender] += msg.value;
        updateTopDonors(msg.sender, donations[msg.sender]);

        emit DonationReceived(msg.sender, msg.value);
    }

    function updateTopDonors(address donor, uint totalDonation) internal {
        // Check if donor is already in top 3 and update amount
        for (uint i = 0; i < 3; i++) {
            if (topDonors[i].donorAddress == donor) {
                topDonors[i].totalDonated = totalDonation;
                sortTopDonors();
                emitTopDonors();
                return;
            }
        }

        // Check if new donor qualifies for top 3
        for (uint i = 0; i < 3; i++) {
            if (totalDonation > topDonors[i].totalDonated) {
                // Shift lower donors down
                for (uint j = 2; j > i; j--) {
                    topDonors[j] = topDonors[j - 1];
                }
                topDonors[i] = Donor(donor, totalDonation);
                emitTopDonors();
                break;
            }
        }
    }

    function sortTopDonors() internal {
        // Simple bubble sort for top 3 donors
        for (uint i = 0; i < 2; i++) {
            for (uint j = 0; j < 2 - i; j++) {
                if (topDonors[j].totalDonated < topDonors[j + 1].totalDonated) {
                    Donor memory temp = topDonors[j];
                    topDonors[j] = topDonors[j + 1];
                    topDonors[j + 1] = temp;
                }
            }
        }
    }

    function emitTopDonors() internal {
        address[3] memory addresses;
        uint[3] memory amounts;
        for (uint i = 0; i < 3; i++) {
            addresses[i] = topDonors[i].donorAddress;
            amounts[i] = topDonors[i].totalDonated;
        }
        emit TopDonorsUpdated(addresses, amounts);
    }

    function getTopDonors() external view returns (address[3] memory, uint[3] memory) {
        address[3] memory addresses;
        uint[3] memory amounts;
        for (uint i = 0; i < 3; i++) {
            addresses[i] = topDonors[i].donorAddress;
            amounts[i] = topDonors[i].totalDonated;
        }
        return (addresses, amounts);
    }

    function contractBalance() external view returns (uint) {
        return address(this).balance;
    }
}
